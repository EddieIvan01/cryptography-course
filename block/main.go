package main

import (
	"encoding/hex"
	"fmt"
	"io/ioutil"
	"os"
)

// AES128 : 16 bytes block
type block [4][4]byte

type AES128Cipher struct {
	key [4][44]byte
}

var (
	sbox0 = [16][16]byte{
		[16]byte{0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
		[16]byte{0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},
		[16]byte{0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},
		[16]byte{0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},
		[16]byte{0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},
		[16]byte{0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},
		[16]byte{0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},
		[16]byte{0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},
		[16]byte{0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},
		[16]byte{0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},
		[16]byte{0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79},
		[16]byte{0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08},
		[16]byte{0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a},
		[16]byte{0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e},
		[16]byte{0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf},
		[16]byte{0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16},
	}

	sbox1 = [16][16]byte{
		[16]byte{0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb},
		[16]byte{0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb},
		[16]byte{0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e},
		[16]byte{0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25},
		[16]byte{0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92},
		[16]byte{0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84},
		[16]byte{0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06},
		[16]byte{0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b},
		[16]byte{0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73},
		[16]byte{0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e},
		[16]byte{0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b},
		[16]byte{0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4},
		[16]byte{0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f},
		[16]byte{0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef},
		[16]byte{0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61},
		[16]byte{0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d},
	}
)

func byteReplace(b byte) byte {
	return sbox0[b>>4][b&0x0F]
}

func byteReplaceRev(b byte) byte {
	return sbox1[b>>4][b&0x0F]
}

func blockByteReplace(blk *block) {
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			blk[i][j] = byteReplace(blk[i][j])
		}
	}
}

func blockByteReplaceRev(blk *block) {
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			blk[i][j] = byteReplaceRev(blk[i][j])
		}
	}
}

func rowShift(blk *block) {
	for i := 1; i < 4; i++ {
		blk[i][0], blk[i][1],
			blk[i][2], blk[i][3] = blk[i][(0+i)%4], blk[i][(1+i)%4],
			blk[i][(2+i)%4], blk[i][(3+i)%4]
	}
}

func rowShiftRev(blk *block) {
	for i := 1; i < 4; i++ {
		blk[i][0], blk[i][1],
			blk[i][2], blk[i][3] = blk[i][(4-i)%4], blk[i][(5-i)%4],
			blk[i][(6-i)%4], blk[i][(7-i)%4]
	}
}

func shiftLeftGF28(b byte) byte {
	xor := (b & 0x80) == 0x80
	output := b << 1
	if xor {
		return output ^ 0x1B
	}
	return output
}

// calculate multiplication on GF(2^8)
func mulGF28(b byte, x byte) byte {
	tmp := [8]byte{b}
	for i := 1; i < 8; i++ {
		tmp[i] = shiftLeftGF28(tmp[i-1])
	}

	output := (x & 0x01) * b
	var i uint8 = 1
	for ; i < 8; i++ {
		output ^= ((x >> i) & 0x01) * tmp[i]
	}

	return output
}

var (
	colMatrix = [4][4]byte{
		[4]byte{0x02, 0x03, 0x01, 0x01},
		[4]byte{0x01, 0x02, 0x03, 0x01},
		[4]byte{0x01, 0x01, 0x02, 0x03},
		[4]byte{0x03, 0x01, 0x01, 0x02},
	}

	colMatrixRev = [4][4]byte{
		[4]byte{0x0E, 0x0B, 0x0D, 0x09},
		[4]byte{0x09, 0x0E, 0x0B, 0x0D},
		[4]byte{0x0D, 0x09, 0x0E, 0x0B},
		[4]byte{0x0B, 0x0D, 0x09, 0x0E},
	}

	roundConst = [10][4]byte{
		[4]byte{0x01, 0x00, 0x00, 0x00},
		[4]byte{0x02, 0x00, 0x00, 0x00},
		[4]byte{0x04, 0x00, 0x00, 0x00},
		[4]byte{0x08, 0x00, 0x00, 0x00},
		[4]byte{0x10, 0x00, 0x00, 0x00},
		[4]byte{0x20, 0x00, 0x00, 0x00},
		[4]byte{0x40, 0x00, 0x00, 0x00},
		[4]byte{0x80, 0x00, 0x00, 0x00},
		[4]byte{0x1B, 0x00, 0x00, 0x00},
		[4]byte{0x36, 0x00, 0x00, 0x00},
	}
)

func colMix(blk block) block {
	var output block
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			for k := 0; k < 4; k++ {
				output[i][j] ^= mulGF28(colMatrix[i][k], blk[k][j])
			}
		}
	}
	return output
}

func colMixRev(blk block) block {
	var output block
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			for k := 0; k < 4; k++ {
				output[i][j] ^= mulGF28(colMatrixRev[i][k], blk[k][j])
			}
		}
	}
	return output
}

func (aes *AES128Cipher) keyExpansion(raw [16]byte) {
	ptr := 0
	for i := 0; i < 16; i++ {
		if i != 0 && i%4 == 0 {
			ptr++
		}
		aes.key[i%4][ptr] = raw[i]
	}

	round := 0
	for i := 4; i < 44; i++ {
		if i%4 != 0 {
			for j := 0; j < 4; j++ {
				aes.key[j][i] = aes.key[j][i-4] ^ aes.key[j][i-1]
			}

		} else {
			tmp := [4]byte{}
			tmp[0],
				tmp[1],
				tmp[2],
				tmp[3] = byteReplace(aes.key[1][i-1]),
				byteReplace(aes.key[2][i-1]),
				byteReplace(aes.key[3][i-1]),
				byteReplace(aes.key[0][i-1])

			for t := 0; t < 4; t++ {
				tmp[t] ^= roundConst[round][t]
			}

			for j := 0; j < 4; j++ {
				aes.key[j][i] = aes.key[j][i-4] ^ tmp[j]
			}
			round++
		}
	}
}

func blockFromBytes(msg [16]byte) block {
	output := block{}
	ptr := 0
	for i := 0; i < 16; i++ {
		if i != 0 && i%4 == 0 {
			ptr++
		}
		output[i%4][ptr] = msg[i]
	}

	return output
}

func bytesFromBlock(blk block) [16]byte {
	output := [16]byte{}
	for i := 0; i < 16; i++ {
		output[i] = blk[i%4][i/4]
	}

	return output
}

func (aes AES128Cipher) encrypt(msg [16]byte) [16]byte {
	output := blockFromBytes(msg)

	// pre round key xor
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			output[i][j] ^= aes.key[i][j]
		}
	}

	// 9 round
	for round := 1; round < 10; round++ {
		blockByteReplace(&output)
		rowShift(&output)
		output = colMix(output)
		for i := 0; i < 4; i++ {
			for j := 0; j < 4; j++ {
				output[i][j] ^= aes.key[i][j+round*4]
			}
		}
	}

	// last round
	blockByteReplace(&output)
	rowShift(&output)

	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			output[i][j] ^= aes.key[i][j+10*4]
		}
	}

	return bytesFromBlock(output)
}

func (aes AES128Cipher) decrypt(cipher [16]byte) [16]byte {
	output := blockFromBytes(cipher)

	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			output[i][j] ^= aes.key[i][j+10*4]
		}
	}

	rowShiftRev(&output)
	blockByteReplaceRev(&output)

	for round := 9; round > 0; round-- {
		for i := 0; i < 4; i++ {
			for j := 0; j < 4; j++ {
				output[i][j] ^= aes.key[i][j+round*4]

			}
		}
		output = colMixRev(output)
		rowShiftRev(&output)
		blockByteReplaceRev(&output)
	}

	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			output[i][j] ^= aes.key[i][j]
		}
	}

	return bytesFromBlock(output)
}

func NewAES128Cipher(key [16]byte) *AES128Cipher {
	aes := &AES128Cipher{}
	aes.keyExpansion(key)
	return aes
}

func pkcs7Padding(b []byte) []byte {
	count := len(b) % 0x10

	for i := 0; i < 0x10-count; i++ {
		b = append(b, byte(0x10-count))
	}
	return b
}

func pkcs7PaddingRev(b []byte) []byte {
	count := b[len(b)-1]
	return b[:len(b)-int(count)]
}

func copy16bytes(src []byte, dst *[16]byte) {
	for i := 0; i < 16; i++ {
		dst[i] = src[i]
	}
}

// implement ECB mode
func (aes AES128Cipher) Encrypt(msg []byte) []byte {
	msg = pkcs7Padding(msg)
	bs := len(msg) / 0x10

	output := []byte{}
	tmp := [16]byte{}

	for i := 0; i < bs; i++ {
		copy16bytes(msg[i*16:(i+1)*16], &tmp)
		blk := aes.encrypt(tmp)
		output = append(output, blk[:]...)
	}

	return output
}

func (aes AES128Cipher) Decrypt(cipher []byte) []byte {
	bs := len(cipher) / 0x10

	output := []byte{}
	tmp := [16]byte{}

	for i := 0; i < bs; i++ {
		copy16bytes(cipher[i*16:(i+1)*16], &tmp)
		blk := aes.decrypt(tmp)
		output = append(output, blk[:]...)
	}
	output = pkcs7PaddingRev(output)

	return output
}

func debug() {
	key := [16]byte{
		0xA1, 0xA2, 0x50, 0x23,
		0x55, 0xFE, 0x07, 0x34,
		0xE9, 0xBB, 0xAC, 0x99,
		0x19, 0x0D, 0x3C, 0xAA,
	}
	aes := NewAES128Cipher(key)

	msg := []byte("Hello, world! This is an AES128 cipher encrypt/decrypt in ECB mode.")
	fmt.Println(msg)

	cipher := aes.Encrypt(msg)
	fmt.Println(cipher)

	fmt.Println(aes.Decrypt(cipher))
}

func main() {
	// debug()

	mode := os.Args[1]
	keyT := os.Args[2]
	in := os.Args[3]
	out := os.Args[4]

	keyTT := make([]byte, 16)
	hex.Decode(keyTT, []byte(keyT))
	key := [16]byte{}
	copy16bytes(keyTT, &key)

	aes := NewAES128Cipher(key)

	switch mode {
	case "enc":
		msg, _ := ioutil.ReadFile(in)
		cipher := aes.Encrypt([]byte(msg))
		ioutil.WriteFile(out, cipher, 0)
	case "dec":
		cipher, _ := ioutil.ReadFile(in)
		msg := aes.Decrypt(cipher)
		ioutil.WriteFile(out, msg, 0)
	}
}
